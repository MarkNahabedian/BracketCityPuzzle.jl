var documenterSearchIndex = {"docs":
[{"location":"#BracketCityPuzzle","page":"Home","title":"BracketCityPuzzle","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for BracketCityPuzzle.","category":"page"},{"location":"","page":"Home","title":"Home","text":"These are some software tools for working with \"Bracket City\" puzzles as appear onnthe web site for The Atlantic Monthly.","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here's an example that illustrates how this software can be helpful for back-solving some clues:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using BracketCityPuzzle\n\n# Puzzle from 2025-09-29:\nparsed = parse_puzzle(\"\"\"\\\"Willie [\"to whom it  c[first word in many\n [decadent break[‚è© ( [where you want to put your [the B in BFF] foot])]\nlocation]time stories]rn\"]s makes \"The [phrase (\"y[Swedish pop\ngroup behind \"Mamma Mia\"] dabba doo!\" or \"to [concept represented\n by a sideways [lucky number in üá®üá≥ (add [star count for a very\n fancy [The Plaza or The [disc-shaped [ a joke/smile/window]er\n with a finely s[‚òéÔ∏è conference ‚û°Ô∏è  ‚¨ÖÔ∏è \"of [heavy- (designed\n for durability)]\" ü™ñ]oped edge], e.g.]] to get an unlucky number\n in üá∫üá∏)]] and beyond!\" üöÄ, e.g.)]\\\"\"\"\")\n\nshow_puzzle(parsed)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Above, I can now see the puzzle in an indented \"outline\" style that makes the nesting of the brackets obvious.  Each bracket is identified with a unique number so we can indicate which clue is being answered. I can add those answers I can figure out:","category":"page"},{"location":"","page":"Home","title":"Home","text":"set_answer(parsed, 6, \"best\")\nset_answer(parsed, 5, \"forward\")\nset_answer(parsed, 8, \"abba\")\nset_answer(parsed, 14, \"crack\")\nset_answer(parsed, 16, \"duty\")\nset_answer(parsed, 15, \"call\")\nset_answer(parsed, 13, \"ritz\")\nset_answer(parsed, 12, \"hotel\")\nset_answer(parsed, 11, \"five\")\n\nshow_puzzle(preduce(parsed))","category":"page"},{"location":"","page":"Home","title":"Home","text":"Above, preduce is used so that fully solved bracket expressions are replaced with their answers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"At this point, I wasn't able too figure out any of the highlighted clues, but I was able to figure out several outer clues, so I answered those:","category":"page"},{"location":"","page":"Home","title":"Home","text":"set_answer(parsed, 1, \"may\")           # to whom it may concern\nset_answer(parsed, 2, \"once\")          # cONCErn\nset_answer(parsed, 3, \"bed\")           # bedtime stories\n\nshow_puzzle(preduce(parsed))","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once I had the context for the remaining clues, their answers were straightforward","category":"page"},{"location":"","page":"Home","title":"Home","text":"set_answer(parsed, 4, \"fast\")\nset_answer(parsed, 10, \"eight\")\nset_answer(parsed, 9, \"infinity\")\nset_answer(parsed, 7, \"catch\")\nshow_puzzle(preduce(parsed))","category":"page"},{"location":"","page":"Home","title":"Home","text":"That is why I find this software helpful for solving Bracket City puzzles.","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Definitions","page":"Home","title":"Definitions","text":"","category":"section"},{"location":"#BracketCityPuzzle.Bracket","page":"Home","title":"BracketCityPuzzle.Bracket","text":"Bracket(clue, answer)\n\nRepresents a bracketed clue, and possibly its answer.\n\n\n\n\n\n","category":"type"},{"location":"#BracketCityPuzzle.all_brackets-Tuple{Vector{Union{Bracket, AbstractString}}}","page":"Home","title":"BracketCityPuzzle.all_brackets","text":"all_brackets(parsed::BCPuzzle)\n\nReturns a vector of all of the Brackets within parsed.\n\n\n\n\n\n","category":"method"},{"location":"#BracketCityPuzzle.findBracket","page":"Home","title":"BracketCityPuzzle.findBracket","text":"findBracket(test, ::BCPuzzle)::Vector{Bracket}\n\nReturns a vector of Bracket objects that match test, which can be a predicate or a substring to match.\n\n\n\n\n\n","category":"function"},{"location":"#BracketCityPuzzle.hasanswer-Tuple{Bracket}","page":"Home","title":"BracketCityPuzzle.hasanswer","text":"hasanswer(::Bracket)\n\nReturns true if the Bracket has an answer.\n\n\n\n\n\n","category":"method"},{"location":"#BracketCityPuzzle.issolved-Tuple{Union{Bracket, AbstractString}}","page":"Home","title":"BracketCityPuzzle.issolved","text":"issolved(::PuzzleElement)::Bool\n\nReturns true if the puzzle element is solved.\n\nA Bracket is solved only if it and all descendents are solved.\n\n\n\n\n\n","category":"method"},{"location":"#BracketCityPuzzle.parse_puzzle","page":"Home","title":"BracketCityPuzzle.parse_puzzle","text":"parse_puzzle(string_or_token_vector)\n\nParses the string representation of a Bracket City puzzle. The result is a vector of strings and nested Bracket objects.\n\n\n\n\n\n","category":"function"},{"location":"#BracketCityPuzzle.preduce","page":"Home","title":"BracketCityPuzzle.preduce","text":"preduce(::BCPuzzle)::BCPuzzle\n\nSimplifies the puzzle to a new puzzle by substituting in any Bracket answers that are known.\n\n\n\n\n\n","category":"function"},{"location":"#BracketCityPuzzle.set_answer-Tuple{Vector{Union{Bracket, AbstractString}}, Int64, Union{Missing, AbstractString}}","page":"Home","title":"BracketCityPuzzle.set_answer","text":"set_answer(parsed::BCPuzzle, bracket_id::Int, answer::AbstractString)\n\nFind the Bracket with the specified bracket_id and set its answer to answer.\n\n\n\n\n\n","category":"method"},{"location":"#BracketCityPuzzle.show_puzzle-Tuple{Vector{Union{Bracket, AbstractString}}}","page":"Home","title":"BracketCityPuzzle.show_puzzle","text":"show_puzzle(parsed::BCPuzzle)\n\nOutputs the puzzle in a more readable format with lines indented proportional to bracket nesting.\n\nIf a Bracket has an answer then it is printed immediately before the close braclet.\n\n\n\n\n\n","category":"method"},{"location":"#BracketCityPuzzle.to_string","page":"Home","title":"BracketCityPuzzle.to_string","text":"to_string(puzzle::BCPuzzle)::AbstractString\n\nConvert the puzzle to its textual representation.  This is the inverse of parse_puzzle.\n\n\n\n\n\n","category":"function"},{"location":"#BracketCityPuzzle.tokenize_puzzle-Tuple{AbstractString}","page":"Home","title":"BracketCityPuzzle.tokenize_puzzle","text":"tokenize_puzzle(::AbstractString)\n\nTokenizes the string to produce a Vector of tokens consisting of strings, :openbracket and :closebracket symbols.\n\n\n\n\n\n","category":"method"},{"location":"#BracketCityPuzzle.walkBrackets-Tuple{Function, Any}","page":"Home","title":"BracketCityPuzzle.walkBrackets","text":"walkBrackets(f::Function, thing)\n\nCalls the function on eqch Bracket nested within thing.\n\n\n\n\n\n","category":"method"}]
}
